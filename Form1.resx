<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAHyAAAAEAIAAoEAAAFgAAACgAAAAfAAAAQAAAAAEAIAAAAAAAgA8AABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlv/xABguJhInTj8qGjMpGAAAAAEBAQEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOGhUAAAAAAj16Y0tev5rAa9qv5WLIoc9GjXFuCxQQCRky
        KAAAAAAAAAAAAAAAAAAAAAAANGdTACxWRgtNnH5dV7COlE2cfXgvX0wuAAAAAgcNCwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBwYAxf//AEGEalZr2rDrff7N/37/z/9+/87/cOS3+EGD
        aWFu4bUAERERAAAAAAAAAAAAIT4zAP///wBdvZh3de/A+nz8y/949cX/aNSq5UWMcXAAAAAHFioiAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANWtWAC1aSCRmz6bXff/O/33/zf99/83/ff/N/3z8
        zP9Wro2nAAAAAgMDAwAAAAAAAAAAAEuWeQBJknURdOq9y3//z/99/83/ff/N/37/z/9v47f2QoZsaf//
        /wAEBwYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQgHAP///wBSpYWAefXG/33/zf99/83/ff/N/33/
        zf9+/87/Ysih3D9/Z3lPn4CIUaSEjE2dfohJlXh5SJF1fGHFn+xr2q//e/vK/33/zf99/83/fv/O/2TM
        pNwmSz0nLVtKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFANAAYLyYQZs+nyX3/zv99/83/ff/N/33/
        zf99/83/ff/N/3n3x/928MH/evnI/3r6yf96+Mj/ePXF/3bwwf9y6bv/cee6/3v8yv99/83/ff/N/33/
        zv9388T/SZN3gP///wABAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAA/fmYAPn1lK3Hmuep+/87/ff/N/33/
        zf99/83/ff/N/33/zf99/83/ff/O/33/zf99/83/ff/N/33/zf99/87/fv/O/37/zv99/83/ff/N/33/
        zf99/83/ff/O/2DCnc8PHhgWGC8mAAAAAAAAAAAAAAAAAAAAAAAAAAAAU6eHAE6dfz1278H0ff/O/33/
        zf99/83/ff/N/33/zf99/83/ff/N/33/zf99/83/ff/N/33/zf99/83/ff/N/33/zf99/83/ff/N/33/
        zf99/83/ff/N/37/zv9v4bb1NGhUQzt3YAAAAAAAAAAAAAAAAAAAAAAAAAAAAWrWrABYspBCePTE933/
        zv99/s3/e/vJ/33/zf99/83/ff/N/33/zf99/83/ff/N/33/zf99/83/ff/N/33/zf99/83/ff/N/33/
        zf99/83/ff/O/3z9y/99/83/dvHC/0OHbWxlz6cANzk4AAAAAAC3//8ARYtxP129mJ5Ys5CFUaSEcXj0
        xPd9/sz/de66/3Pqtf98/sz/ff/N/33/zf99/83/ff/N/33/zf99/87/fv/O/37/zv9+/87/ff/N/33/
        zf99/83/ff/O/3n1wv9z6rX/e/vI/3n2x/9GjXOFov//ACMgIgAAAAAAAAAACmPJorh8/cv/e/rJ/m3e
        svVu4bT+fP3L/3Tqtf907Lj/evrF/3r6xf99/83/ff/N/33/zf96+Mj/dO2//3Prvf9z673/dvHC/33+
        zf99/83/evnG/3j1wv917Lj/dvC8/3v6yf9r27D/O3dglwAAAA8AAAAAAAAAAAAAAANixqCgfP3M/33/
        zf9+/87/fP3M/33/zf9+/87/efbH/2Ckrv9ZkZn/dee//33/zv99/83/e/rJ/3j0xP9388T/dvDB/3fy
        w/99/83/e/vJ/1yRpv9XYrf/ccnK/33/zP97+sn/bd6z/2jTqvNcupbEM2ZSNUSLcABgxJ4ATJp8PXLo
        uuZ9/87/ff/N/33/zf99/83/fv/O/23OvP9cO+P/XS3s/2eXyv9+/87/ff/N/33/zf99/87/ff/O/33/
        zv9+/87/fv/O/3Hdvv9cQt3/Yin+/2N8z/98/sr/ff/N/37/z/9+/8//e/nJ/1Knh5cAAAAAIUA0AAAA
        AAFatpNRde7A2n3/zf99/83/ff/N/37/zv9x3r7/W1vM/15P2/9vxcn/fv/N/33/zf99/83/ff/N/33/
        zf99/83/ff/N/37/zv906MH/XljW/1817/9nnsb/fP/L/33/zf99/83/ff/N/3z9zP9ZtJKmAAAAAwAA
        AAAZKyQA+v//AFiyj3t6+cj/ff/N/33/zf99/83/fP7M/3Plvv9z5cH/ff7M/33/zf99/83/ff/N/33/
        zf99/83/ff/N/33/zf99/83/ff/M/3HVw/9pvL3/ePPH/33/zf99/83/ff/N/37/zv907L77R5B0YHHn
        ugAAAAAAFy4lAAcNCw9fwZvBff/N/33/zf99/83/ff/N/33/zf9+/87/fv/O/33/zf99/83/ff/N/33/
        zf99/83/ff/N/33/zf99/83/ff/N/33/zf9+/83/fv/N/33/zf99/83/ff/N/33/zf928MH0WraTkRw2
        LA4oUEAAAAAAAD17YwA2blg8b+K28n7/zv99/83/ff/N/33/zf99/83/ff/N/33/zf99/83/ff/N/33/
        zf99/83/ff/N/33/zf99/83/ff/N/33/zf99/83/ff/N/33/zf99/83/ff/N/33/zf97+sn/WLKQlAAA
        AAYyY1AAAAAAAB4iIAB38sMASpZ5cHj0xP99/83/ff/N/33/zf99/83/ff/N/33/zf99/83/ff/N/33/
        zf99/83/ff/N/33/zf99/83/ff/N/33/zf99/83/ff/N/33/zf99/83/ff/N/33/zf99/83/evjI/1Gk
        hICa//0AEBIRAAAAAAAOEQ8A////AFatjJd7+8r/ff/N/33/zf99/83/ff/N/33/zf99/83/ff/N/33/
        zf99/83/ff/N/33/zf99/83/ff/N/33/zf99/83/ff/N/33/zf99/83/ff/N/33/zf99/83/ff/N/3n2
        xv9Nm315g//XACgoKAAAAAAADRAOAAAAAAFYs5ChfP3M/33/zv9+/87/fv/O/33+zf99/83/fv/O/33/
        zf99/83/ff/N/33/zf99/83/ff/N/33/zf99/83/ff/N/37/zv9+/87/ff/O/33/zf99/83/ff/N/37/
        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
        P/7/8B/+//Af/v/wf/7//H/+
</value>
  </data>
</root>